const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');

const app = express();
app.use(cors());
const server = http.createServer(app);
const io = new Server(server, {
    cors: {
        origin: "*", // Tüm kaynaklara izin ver
        methods: ["GET", "POST"]
    }
});

const PORT = 3001;
const BOT_NAMES = ["Aslı", "Can", "Efe", "Gizem", "Bora", "Ceren", "Deniz", "Elif"];
const AUTO_START_TIMEOUT = 30 * 1000; // 30 saniye
const STALE_ROOM_TIMEOUT = 1 * 60 * 1000; // 1 dakika
const CLEANUP_INTERVAL = 30 * 1000; // 30 saniye

// --- Oyun Sabitleri ---
const SAFE_POSITIONS = [0, 8, 13, 21, 26, 34, 39, 47];
const START_POSITIONS = { red: 0, green: 13, blue: 39, yellow: 26 };
const HOME_ENTRANCES = { red: 51, green: 12, blue: 38, yellow: 25 };
const HOME_PATH_STARTS = { red: 52, green: 58, yellow: 70, blue: 64 }; // Mavi ve Sarı düzeltildi
const WINNING_POSITIONS = { red: 57, green: 63, yellow: 75, blue: 69 }; // Mavi ve Sarı düzeltildi

// Hafızada oda ve oyuncu bilgilerini tut
let rooms = {};

// --- Yardımcı Fonksiyonlar ---

const broadcastRoomList = () => {
    const roomDetails = Object.values(rooms).map(room => ({
        id: room.id,
        playerCount: room.players.length,
        phase: room.gameState.phase
    }));
    io.emit('update_rooms', roomDetails);
};

const updateRoom = (roomId) => {
    const room = rooms[roomId];
    if (room) {
        io.to(roomId).emit('room_updated', room);
        broadcastRoomList();
    }
};

const deleteRoom = (roomId) => {
    if (rooms[roomId]) {
        console.log(`[Temizlik] Oda siliniyor: ${roomId}.`);
        delete rooms[roomId];
        broadcastRoomList();
    }
};

const getValidMoves = (color, diceValue, positions) => {
    const moves = [];
    const playerPawns = positions[color];
    const startPosition = START_POSITIONS[color];

    if (diceValue === 6 && playerPawns.includes(-1)) {
        const isStartOccupiedBySelf = playerPawns.some(p => p === startPosition);
        if (!isStartOccupiedBySelf) {
            const pawnIndex = playerPawns.findIndex(p => p === -1);
            moves.push({ type: 'start', pawnIndex, from: -1, to: startPosition });
        }
    }

    for (let i = 0; i < playerPawns.length; i++) {
        const currentPos = playerPawns[i];
        if (currentPos < 0) continue;

        const homeEntrance = HOME_ENTRANCES[color];
        const homePathStart = HOME_PATH_STARTS[color];
        const winningPosition = WINNING_POSITIONS[color];
        let newPos;

        if (currentPos >= 52) { // Ev yolunda
            newPos = currentPos + diceValue;
        } else { // Ana tahtada
            const movesToHomeEntrance = (homeEntrance - currentPos + 52) % 52;
            if (diceValue > movesToHomeEntrance) {
                newPos = homePathStart + (diceValue - movesToHomeEntrance - 1);
            } else {
                newPos = (currentPos + diceValue) % 52;
            }
        }

        if (newPos > winningPosition || playerPawns.includes(newPos)) continue;

        moves.push({ type: 'move', pawnIndex: i, from: currentPos, to: newPos });
    }
    return moves;
};

const handlePawnMove = (room, player, move) => {
    const { color } = player;
    const { pawnIndex, to } = move;
    room.gameState.positions[color][pawnIndex] = to;

    let capturedPawn = false;
    if (move.type === 'move' && !SAFE_POSITIONS.includes(to) && to < 52) {
        Object.keys(room.gameState.positions).forEach(otherColor => {
            if (otherColor !== color) {
                room.gameState.positions[otherColor] = room.gameState.positions[otherColor].map(pawnPos => {
                    if (pawnPos === to) {
                        console.log(`[Oyun] ${player.nickname}, ${otherColor} renginin piyonunu ${to} pozisyonunda kırdı.`);
                        capturedPawn = true;
                        return -1;
                    }
                    return pawnPos;
                });
            }
        });
    }
    return capturedPawn;
};

const updateTurn = (room) => {
    const { turnOrder, currentPlayer } = room.gameState;
    const currentIndex = turnOrder.indexOf(currentPlayer);
    const nextIndex = (currentIndex + 1) % turnOrder.length;
    const nextPlayerColor = turnOrder[nextIndex];
    
    room.gameState.currentPlayer = nextPlayerColor;
    room.gameState.diceValue = null;
    room.gameState.moves = [];
    const nextPlayer = room.players.find(p => p.color === nextPlayerColor);
    room.gameState.message = `Sıra ${nextPlayer.nickname} oyuncusunda.`;
    
    console.log(`[Sıra] Sıra ${nextPlayer.nickname} (${nextPlayer.color}) oyuncusuna geçti.`);
    updateRoom(room.id);
    playBotTurnIfNeeded(room.id);
};

const playBotTurnIfNeeded = (roomId) => {
    const room = rooms[roomId];
    if (!room || room.gameState.phase !== 'playing') return;

    const currentPlayer = room.players.find(p => p.color === room.gameState.currentPlayer);
    if (!currentPlayer || !currentPlayer.isBot) return;

    console.log(`[Bot] ${currentPlayer.nickname} düşünüyor...`);
    setTimeout(() => {
        const diceValue = Math.floor(Math.random() * 6) + 1;
        room.gameState.diceValue = diceValue;
        console.log(`[Bot] ${currentPlayer.nickname} zar attı: ${diceValue}`);
        
        const validMoves = getValidMoves(currentPlayer.color, diceValue, room.gameState.positions);
        room.gameState.moves = validMoves;
        updateRoom(roomId);

        setTimeout(() => {
            if (validMoves.length > 0) {
                const chosenMove = validMoves[Math.floor(Math.random() * validMoves.length)]; // Basit rastgele seçim
                console.log(`[Bot] ${currentPlayer.nickname} hamlesini seçti:`, chosenMove);
                
                const capturedPawn = handlePawnMove(room, currentPlayer, chosenMove);
                const pawnFinished = chosenMove.to >= WINNING_POSITIONS[currentPlayer.color];
                const moveAgain = diceValue === 6 || capturedPawn || pawnFinished;

                if (moveAgain) {
                    room.gameState.diceValue = null;
                    room.gameState.moves = [];
                    console.log(`[Bot] ${currentPlayer.nickname} tekrar oynuyor.`);
                    updateRoom(roomId);
                    playBotTurnIfNeeded(roomId);
                } else {
                    updateTurn(room);
                }
            } else {
                console.log(`[Bot] ${currentPlayer.nickname} geçerli hamlesi yok.`);
                updateTurn(room);
            }
        }, 1000);
    }, 1000);
};

const determineTurnOrder = (roomId) => {
    const room = rooms[roomId];
    const rolls = Object.entries(room.gameState.turnRolls);

    if (rolls.length < room.players.length) return; // Herkesin zar atmasını bekle

    rolls.sort((a, b) => b[1].diceValue - a[1].diceValue);
    room.gameState.turnOrder = rolls.map(r => r[0]);
    room.gameState.phase = 'playing';
    room.gameState.currentPlayer = room.gameState.turnOrder[0];
    const firstPlayer = room.players.find(p => p.color === room.gameState.currentPlayer);
    room.gameState.message = `${firstPlayer.nickname} en yüksek zarı attı ve oyuna başlıyor!`;

    console.log(`[Oyun] Sıralama belirlendi: ${room.gameState.turnOrder.join(', ')}`);
    updateRoom(roomId);
    playBotTurnIfNeeded(roomId);
};

const startPreGame = (roomId) => {
    const room = rooms[roomId];
    if (!room || room.gameState.phase !== 'waiting') return;

    room.gameState.phase = 'pre-game';
    room.gameState.message = 'Sırayı belirlemek için zar atın!';
    console.log(`[Oyun] Ön oyun aşaması başladı: ${roomId}`);
    updateRoom(roomId);
};

// --- Socket.IO Bağlantı Mantığı ---
io.on('connection', (socket) => {
    console.log('Bir kullanıcı bağlandı:', socket.id);

    socket.on('get_rooms', (callback) => {
        const roomDetails = Object.values(rooms).map(room => ({
            id: room.id,
            playerCount: room.players.length,
            phase: room.gameState.phase
        }));
        if (typeof callback === 'function') callback(roomDetails);
    });

    socket.on('createRoom', ({ nickname }) => {
        const roomId = uuidv4().substring(0, 6);
        const player = { id: socket.id, nickname, color: 'red', isBot: false, isReady: false };
        rooms[roomId] = {
            id: roomId,
            players: [player],
            gameState: {
                phase: 'waiting',
                currentPlayer: null, diceValue: null, turnOrder: [], turnRolls: {},
                positions: { red: [-1, -1, -1, -1], green: [-1, -1, -1, -1], blue: [-1, -1, -1, -1], yellow: [-1, -1, -1, -1] },
                message: 'Oyuncular bekleniyor...'
            },
            hostId: socket.id,
            createdAt: Date.now()
        };
        socket.join(roomId);
        socket.emit('roomCreated', { roomId, player });
        updateRoom(roomId);
        console.log(`[Oda] ${nickname} tarafından ${roomId} odası oluşturuldu.`);
    });

    socket.on('joinRoom', ({ roomId, nickname }) => {
        const room = rooms[roomId];
        if (!room) return socket.emit('error', { message: 'Oda bulunamadı.' });
        if (room.players.length >= 4) return socket.emit('error', { message: 'Oda dolu.' });

        const colors = ['red', 'green', 'blue', 'yellow'];
        const usedColors = room.players.map(p => p.color);
        const availableColor = colors.find(c => !usedColors.includes(c));
        const player = { id: socket.id, nickname, color: availableColor, isBot: false, isReady: false };

        room.players.push(player);
        socket.join(roomId);
        socket.emit('joinedRoom', { roomId, player });
        updateRoom(roomId);
        console.log(`[Oda] ${nickname}, ${roomId} odasına katıldı.`);
    });

    socket.on('playerReady', ({ roomId }) => {
        const room = rooms[roomId];
        if (!room) return;
        const player = room.players.find(p => p.id === socket.id);
        if (player) player.isReady = true;

        const allPlayersReady = room.players.every(p => p.isReady);
        if (room.players.length === 4 && allPlayersReady) {
            startPreGame(roomId);
        }
        updateRoom(roomId);
    });

    socket.on('rollDice', (roomId) => {
        const room = rooms[roomId];
        if (!room) return;
        const player = room.players.find(p => p.id === socket.id);
        if (!player) return;

        if (room.gameState.phase === 'pre-game') {
            if (room.gameState.turnRolls[player.color]) return; // Zaten atılmış
            const diceValue = Math.floor(Math.random() * 6) + 1;
            room.gameState.turnRolls[player.color] = { nickname: player.nickname, diceValue };
            console.log(`[Ön Oyun] ${player.nickname} zar attı: ${diceValue}`);
            updateRoom(roomId);
            determineTurnOrder(roomId);
        } else if (room.gameState.phase === 'playing') {
            if (player.color !== room.gameState.currentPlayer || room.gameState.diceValue) return;

            const diceValue = Math.floor(Math.random() * 6) + 1;
            room.gameState.diceValue = diceValue;
            console.log(`[Oyun] ${player.nickname} zar attı: ${diceValue}`);
            
            const validMoves = getValidMoves(player.color, diceValue, room.gameState.positions);
            room.gameState.moves = validMoves;

            if (validMoves.length === 0) {
                room.gameState.message = `${player.nickname} oynayacak hamlesi yok.`;
                updateRoom(roomId);
                setTimeout(() => updateTurn(room), 1000);
            } else {
                room.gameState.message = `${player.nickname} piyonunu seç.`;
                updateRoom(roomId);
            }
        }
    });

    socket.on('movePawn', ({ roomId, move }) => {
        const room = rooms[roomId];
        if (!room || !move) return;
        const player = room.players.find(p => p.id === socket.id);
        if (!player || player.color !== room.gameState.currentPlayer) return;

        const capturedPawn = handlePawnMove(room, player, move);
        const pawnFinished = move.to >= WINNING_POSITIONS[player.color];
        const moveAgain = room.gameState.diceValue === 6 || capturedPawn || pawnFinished;

        if (moveAgain) {
            room.gameState.diceValue = null;
            room.gameState.moves = [];
            room.gameState.message = `${player.nickname} tekrar oynayacak.`;
            console.log(`[Oyun] ${player.nickname} tekrar oynama hakkı kazandı.`);
        } else {
            updateTurn(room);
        }
        updateRoom(roomId);
    });

    socket.on('disconnect', () => {
        console.log('Bir kullanıcı ayrıldı:', socket.id);
        const roomId = Object.keys(rooms).find(id => rooms[id].players.some(p => p.id === socket.id));
        if (!roomId) return;

        const room = rooms[roomId];
        room.players = room.players.filter(p => p.id !== socket.id);

        if (room.players.filter(p => !p.isBot).length === 0) {
            console.log(`[Temizlik] Odada insan kalmadı. Oda siliniyor: ${roomId}`);
            deleteRoom(roomId);
        } else {
            // Host değişimi gerekebilir
            if (room.hostId === socket.id) {
                const newHost = room.players.find(p => !p.isBot);
                if (newHost) room.hostId = newHost.id;
            }
            updateRoom(roomId);
        }
    });
});

// Sunucuyu başlat
server.listen(PORT, () => {
    console.log(`Sunucu ${PORT} portunda çalışıyor...`);
});
        room.players.push(player);
        socket.join(roomId);
        socket.emit('joinedRoom', { roomId, player });
        updateRoom(roomId);
        console.log(`[Room] ${nickname} joined room ${roomId}`);

        if (room.players.filter(p => !p.isBot).length === 1 && room.players.length > 1) {
             // Eğer odada tek bir insan oyuncu kaldıysa ve botlar varsa, botları hazırla
            room.players.forEach(p => {
                if (p.isBot) p.isReady = true;
            });
        }

        // Eğer odaya giren son oyuncuysa ve herkes hazırsa oyunu başlat
        const allPlayersReady = room.players.every(p => p.isReady);
        if (room.players.length === 4 && allPlayersReady) {
            startPreGame(room.id);
        }
    });

    socket.on('playerReady', ({ roomId }) => {
        const room = rooms[roomId];
        if (!room) return;

        const player = room.players.find(p => p.id === socket.id);
        if (player) {
            player.isReady = true;
            console.log(`[Player] ${player.nickname} is ready.`);
            updateRoom(roomId);
        }

        const allPlayersReady = room.players.every(p => p.isReady);
        if (room.players.length === 4 && allPlayersReady) {
            startPreGame(room.id);
        }
    });

    socket.on('rollDice', (roomId) => {
        const room = rooms[roomId];
        if (!room) return;

        const player = room.players.find(p => p.id === socket.id);
        if (!player) return;

        if (room.gameState.phase === 'pre-game') {
            if (room.gameState.turnRolls[player.color]) {
                console.log(`[Pre-Game] ${player.nickname} already rolled.`);
                return; // Oyuncu zaten zar atmış
            }
            const diceValue = Math.floor(Math.random() * 6) + 1;
            room.gameState.turnRolls[player.color] = { nickname: player.nickname, diceValue };
            console.log(`[Pre-Game] ${player.nickname} rolled a ${diceValue}`);

            updateRoom(roomId);

            const humanPlayers = room.players.filter(p => !p.isBot);
            const allHumansRolled = humanPlayers.every(p => room.gameState.turnRolls[p.color]);

            if (allHumansRolled) {
                console.log('[Pre-Game] All human players have rolled. Determining turn order.');
                determineTurnOrder(room.id);
            }
        } else if (room.gameState.phase === 'playing') {
            if (player.color !== room.gameState.currentPlayer) {
                console.log(`[Warning] Not ${player.nickname}'s turn.`);
                return;
            }
            if (room.gameState.diceValue !== null) {
                console.log(`[Warning] ${player.nickname} already rolled.`);
                return; // Zaten zar atılmış
            }

            const diceValue = Math.floor(Math.random() * 6) + 1;
            room.gameState.diceValue = diceValue;
            console.log(`[Game] ${player.nickname} rolled a ${diceValue}`);

            const validMoves = getValidMoves(player.color, diceValue, room.gameState.positions);
            room.gameState.moves = validMoves;

            if (validMoves.length === 0) {
                room.gameState.message = `${player.nickname} oynayacak hamlesi yok.`;
                updateRoom(roomId);
                setTimeout(() => {
                    updateTurn(room);
                    io.to(roomId).emit('gameState', room.gameState);
                    playBotTurnIfNeeded(roomId);
                }, 1000);
            } else {
                room.gameState.message = `${player.nickname} piyonunu seç.`;
                updateRoom(roomId);
            }
        }
    });

    socket.on('movePawn', ({ roomId, move }) => {
        const room = rooms[roomId];
        if (!room) return;

        const player = room.players.find(p => p.id === socket.id);
        if (!player || player.color !== room.gameState.currentPlayer) {
            console.log(`[Warning] Invalid move attempt by ${player ? player.nickname : 'Unknown'}`);
            return;
        }

        const diceValue = room.gameState.diceValue;
        const newPos = handlePawnMove(room, player, move, diceValue);

        let capturedPawn = false;
        // Piyon kırma mantığı (güvenli bölge hariç)
        if (move.type === 'move' && !SAFE_POSITIONS.includes(newPos) && newPos < 52) {
            Object.keys(room.gameState.positions).forEach(otherColor => {
                if (otherColor !== player.color) {
                    room.gameState.positions[otherColor] = room.gameState.positions[otherColor].map(pawnPos => {
                        if (pawnPos === newPos) {
                            console.log(`[Game] ${player.nickname} captured a pawn of ${otherColor} at ${newPos}`);
                            capturedPawn = true;
                            return -1; // Başa gönder
                        }
                        return pawnPos;
                    });
                }
            });
        }

        const winningPosition = WINNING_POSITIONS[player.color];
        const pawnFinished = newPos >= winningPosition;

        // 6 atarsa, piyon kırarsa, piyonu bitişe ulaştırırsa veya oyuna yeni piyon sokarsa tekrar oynar.
        const moveAgain = move.type === 'start' || diceValue === 6 || capturedPawn || pawnFinished;

        if (!moveAgain) {
            updateTurn(room);
        } else {
            // Tekrar oynaması için zarı sıfırla ama sırayı değiştirmeyin
            room.gameState.diceValue = null;
            room.gameState.moves = [];
            room.gameState.message = `${player.nickname} tekrar oynayacak.`;
            console.log(`[Turn] ${player.nickname} gets to move again.`);
            // Bot ise ve tekrar oynayacaksa, botun tekrar oynamasını tetikle
            if (player.isBot) {
                setTimeout(() => playBotTurnIfNeeded(room.id), 1000);
            }
        }

        io.to(roomId).emit('gameState', room.gameState);
    });

    socket.on('disconnect', () => {
        console.log('A user disconnected:', socket.id);
        const roomId = Object.keys(rooms).find(id => rooms[id] && rooms[id].players.some(p => p.id === socket.id));

        if (!roomId || !rooms[roomId]) {
            console.log(`[Exit] Player ${socket.id} not in a room, nothing to do.`);
            return;
        }

        const room = rooms[roomId];
        const playerIndex = room.players.findIndex(p => p.id === socket.id);

        if (playerIndex === -1) return;

        console.log(`[Exit] Removing player ${room.players[playerIndex].nickname} from room ${roomId}.`);
        room.players.splice(playerIndex, 1);

        const humanPlayersLeft = room.players.some(p => !p.isBot);

        if (!humanPlayersLeft) {
            console.log(`[Cleanup] No human players left in room ${roomId}. Deleting room.`);
            deleteRoom(roomId);
        } else {
            console.log(`[Update] Human players still in room ${roomId}. Updating room state.`);
            if (room.hostId === socket.id) {
                const newHost = room.players.find(p => !p.isBot);
                if (newHost) {
                    room.hostId = newHost.id;
                    console.log(`[Ownership] New host for room ${roomId}: ${newHost.nickname}`);
                }
            }
            updateRoom(roomId);
            broadcastRoomList();
        }
    });

    socket.on('leave_room', () => {
        console.log(`[Exit Trigger] Reason: leave_room, User: ${socket.id}`);
        const roomId = Object.keys(rooms).find(id => rooms[id] && rooms[id].players.some(p => p.id === socket.id));

        if (!roomId || !rooms[roomId]) {
            console.log(`[Exit] Player ${socket.id} not in a room, nothing to do.`);
            return;
        }

        const room = rooms[roomId];
        const playerIndex = room.players.findIndex(p => p.id === socket.id);

        if (playerIndex === -1) return;

        console.log(`[Exit] Removing player ${room.players[playerIndex].nickname} from room ${roomId}.`);
        room.players.splice(playerIndex, 1);

        const humanPlayersLeft = room.players.some(p => !p.isBot);

        if (!humanPlayersLeft) {
            console.log(`[Cleanup] No human players left in room ${roomId}. Deleting room.`);
            deleteRoom(roomId);
        } else {
            console.log(`[Update] Human players still in room ${roomId}. Updating room state.`);
            if (room.hostId === socket.id) {
                const newHost = room.players.find(p => !p.isBot);
                if (newHost) {
                    room.hostId = newHost.id;
                    console.log(`[Ownership] New host for room ${roomId}: ${newHost.nickname}`);
                }
            }
            updateRoom(roomId);
            broadcastRoomList();
        }

        socket.emit('left_room_success');
    });
});

function deleteRoom(roomId) {
    const room = rooms[roomId];
    if (room) {
        console.log(`[Cleanup] Deleting room ${roomId} and its associated timers.`);
        if (room.autoStartTimer) clearTimeout(room.autoStartTimer);
        if (room.staleRoomTimer) clearTimeout(room.staleRoomTimer);
        
        delete rooms[roomId];
        
        // Lobi listesini tüm istemcilere yeniden göndererek anında güncelleme sağla.
        console.log(`[Lobby] Broadcasting updated room list after deleting room ${roomId}.`);
        broadcastRoomList();
    }
}

// --- Stale and Empty Room Cleanup ---
{{ ... }}
    const now = Date.now();
    let roomsChanged = false;

    for (const roomId in rooms) {
        const room = rooms[roomId];
        const humanPlayers = room.players.filter(p => !p.isBot);

        if (room.players.length === 0 || (humanPlayers.length === 0 && (now - room.createdAt > STALE_ROOM_TIMEOUT))) {
            console.log(`[Cleanup] Deleting stale/empty room ${roomId}`);
            
            if (roomTimers[roomId]) clearTimeout(roomTimers[roomId]);
            if (room.botTurnTimer) clearTimeout(room.botTurnTimer);

            delete rooms[roomId];
            delete roomPasswords[roomId];
            delete roomTimers[roomId];
            roomsChanged = true;
        }
    }

    if (roomsChanged) broadcastRoomList();
}, CLEANUP_INTERVAL);

httpServer.listen(PORT, () => {
    console.log(`[Server] Listening on port ${PORT}`);
});
