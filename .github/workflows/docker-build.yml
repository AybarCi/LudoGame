name: Build and Deploy Ludo Game

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/ludo-backend
  WEB_IMAGE_NAME: ${{ github.repository }}/ludo-web

jobs:
  build-backend:
    name: Build and Push Backend
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && 
       (contains(github.event.head_commit.modified, 'backend/') || 
        contains(github.event.head_commit.added, 'backend/') || 
        contains(github.event.head_commit.removed, 'backend/'))) ||
      (github.event_name == 'pull_request' && 
       (contains(github.event.pull_request.changed_files, 'backend/')))
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-backend, build-web]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to Production Server
      if: env.PRODUCTION_SERVER != ''
      env:
        PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
      run: |
        echo "ðŸš€ Deploying to production server..."
        
        # Production server'a SSH ile baÄŸlan ve deployment yap
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_SSH_USER }}@${{ secrets.PRODUCTION_SERVER }} << 'ENDSSH'
          cd /opt/ludo/backend
          
          # Latest backend image'Ä±nÄ± pull et
          docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          
          # Environment deÄŸiÅŸkenlerini gÃ¼ncelle
          export DB_SERVER="${{ secrets.DB_SERVER }}"
          export DB_USER="${{ secrets.DB_USER }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export DB_DATABASE="${{ secrets.DB_DATABASE }}"
          export JWT_SECRET="${{ secrets.JWT_SECRET }}"
          export BASE_URL="${{ secrets.BASE_URL }}"
          export CORS_ORIGIN="${{ secrets.CORS_ORIGIN }}"
          
          # Docker container'larÄ± yeniden baÅŸlat
          docker-compose -f docker-compose.production.yml down
          docker-compose -f docker-compose.production.yml up -d
          
          # Health check bekle
          sleep 30
          curl -f http://localhost:3001/health || exit 1
          
          echo "âœ… Production deployment successful!"
        ENDSSH
    
    - name: Trigger Portainer Webhook (Alternative)
      if: env.PORTAINER_WEBHOOK_URL != '' && env.PRODUCTION_SERVER == ''
      env:
        PORTAINER_WEBHOOK_URL: ${{ secrets.PORTAINER_WEBHOOK_URL }}
      run: |
        curl -X POST "${{ secrets.PORTAINER_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "repository": "${{ github.repository }}",
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "images": [
              "${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest",
              "${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:latest"
            ]
          }'

  build-web:
    name: Build and Push Web Frontend
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && 
       (contains(github.event.head_commit.modified, 'web/') || 
        contains(github.event.head_commit.added, 'web/') || 
        contains(github.event.head_commit.removed, 'web/'))) ||
      (github.event_name == 'pull_request' && 
       (contains(github.event.pull_request.changed_files, 'web/')))
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for web
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push web Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./web
        file: ./web/Dockerfile
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64