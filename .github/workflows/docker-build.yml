name: Build and Deploy Ludo Game

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/ludo-backend
  WEB_IMAGE_NAME: ${{ github.repository }}/ludo-web

jobs:
  build-backend:
    name: Build and Push Backend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-backend, build-web]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Trigger Portainer Webhook
      if: env.PORTAINER_WEBHOOK_URL != ''
      env:
        PORTAINER_WEBHOOK_URL: ${{ secrets.PORTAINER_WEBHOOK_URL }}
      run: |
        echo "üöÄ Triggering Portainer webhook for deployment..."
        
        curl -X POST "${{ secrets.PORTAINER_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "repository": "${{ github.repository }}",
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "images": [
              "${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest",
              "${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:latest"
            ]
          }' \
          || echo "‚ö†Ô∏è Webhook failed, but continuing..."
        
        echo "‚úÖ Webhook triggered successfully!"
    
    - name: Manual Deployment (if webhook not available)
      if: env.PORTAINER_WEBHOOK_URL == '' && (env.PRODUCTION_SERVER != '' || env.DEPLOYMENT_SSH_HOST != '')
      run: |
        echo "üöÄ Performing manual deployment..."
        
        # Use PRODUCTION_SERVER or DEPLOYMENT_SSH_HOST
        SSH_HOST="${{ secrets.PRODUCTION_SERVER || secrets.DEPLOYMENT_SSH_HOST }}"
        SSH_USER="${{ secrets.PRODUCTION_SSH_USER || 'root' }}"
        
        ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'ENDSSH'
          echo "üì¶ Updating Docker images..."
          
          # Pull latest images
          docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          docker pull ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:latest
          
          echo "üîÑ Restarting containers..."
          
          # Restart backend if exists
          if [ -f "/opt/ludo/backend/docker-compose.production.yml" ]; then
            cd /opt/ludo/backend
            docker-compose -f docker-compose.production.yml down
            docker-compose -f docker-compose.production.yml up -d
          fi
          
          # Restart web if exists  
          if [ -f "/opt/ludo/web/docker-compose.yml" ]; then
            cd /opt/ludo/web
            docker-compose -f docker-compose.yml down
            docker-compose -f docker-compose.yml up -d
          fi
          
          echo "‚úÖ Manual deployment completed!"
        ENDSSH

  build-web:
    name: Build and Push Web Frontend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for web
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push web Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./web
        file: ./web/Dockerfile
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64